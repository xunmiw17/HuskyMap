## CSE 331 HW6 Questions

NOTE: This file is used as part of HW6, and is not due as part of the HW5
submission. You may leave it blank for HW5.

## Part 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of nodes and a collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of nodes, whether there 
       is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).

For the first representation, the space usage is quite efficient because there is no extra space that's wasted, and the
space complexity is N+E where N represents the number of nodes and E represents the number of edges. However, when using
this representation, it is not efficient to find the edges a node has because the nodes in this representation are not
somehow connected to the edges, meaning that the time complexity to find the outgoing edges of a node is O(E).

For the second representation, it creates "connection" between the nodes and their outgoing edges, which would make it
efficient to get all the outgoing edges of a node (with runtime complexity O(1)). However, the time complexity to check
if there exists a given edge can be O(N) when the source node has an outgoing edge with each of the other nodes.

For the third representation, it is very efficient to check if a given edge exists in a graph (with O(1) time complexity).
However, the space usage can be not so efficient because it requires a matrix of space complexity N^2 no matter how many
edges there are in the graph in total.


2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.

I chose the adjacency list representation because it is very efficient in accessing the outgoing edges of a given node,
which should be a common operation in such application where we want to get different paths (edges) of two buildings (nodes)
and compare which of them has the lowest cost. Besides, the space usage is quite efficient since there are no wasted space
for this representation.


## Part 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.

- I added a test to check if the "childrenOf" method throws an exception if the parent node is not in the graph, which I
    forgot to include when I first wrote the test.
- I added tests to check if the "containsEdge" method throws an exception if either the parent/child node is not in the
    graph. I added this test because I've changed the spec to throw an exception.
- I added tests to check if the "addEdge" method throws an exception if either the parent/child node is not in the graph.
    I added this test because I've changed the spec to throw an exception.
- I added a test to check if the graph works correctly with a large amount of nodes and edges. I added this test because
    the path-finding application is going to deal with a huge graph, and I am going to prepare for such case.
- I added two tests that check the equals and hashCode methods of the inner class DirectedLabeledEdge. I added these two
    tests because I added the equals and hashCode methods in the DirectedLabeledEdge because it is much easier to
    compare the equality of two edges with equals method and it is a frequent operation.
- Additionally, I deleted the tests for "isConnected" method because I deleted that method from my graph implementation
    since it is not so easy to implement, and I am not sure if this method will actually be useful in the application,
    so I chose to delay the declaration and implementation of this method.




2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.

yes.
I changed two parts of the spec. The first one is that I added a @throws javadoc comment in my "containsEdge" method
when either the parent/child node is not in the graph because I didn't address such cases in @spec.requires, and it
can produce horrible results like the "containsEdge" returns false because the node at first is not in the graph, which
can cause other methods that call "containsEdge" to crash.

The second one is that I also added a @throws javadoc comment in my "addEdge" method because this method calls the
"containsEdge" method inside, which now throws an exception when the parent/child node is not in the graph.



